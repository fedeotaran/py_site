{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Inicio \u00b6 Documentaci\u00f3n de la c\u00e1tedra Taller de lenguaje de Programaci\u00f3n - Python. En esta documentaci\u00f3n se van a publicar distintas gu\u00edas que ayuden a los alumnos a realizar las pr\u00e1cticas de las materias.","title":"Home"},{"location":"#inicio","text":"Documentaci\u00f3n de la c\u00e1tedra Taller de lenguaje de Programaci\u00f3n - Python. En esta documentaci\u00f3n se van a publicar distintas gu\u00edas que ayuden a los alumnos a realizar las pr\u00e1cticas de las materias.","title":"Inicio"},{"location":"entornos_virtuales/","text":"Entornos virtuales \u00b6 Virtualenv es una herramienta usada para crear un ambiente aislado de Python. Este ambiente tiene su propio directorio de instalaci\u00f3n que no comparte librer\u00edas con otros ambientes virtualenv. Esto tiene la ventaja que separar las librer\u00edas espec\u00edficas que necesitamos en cada entorno virtual. Es \u00fatil hacer esta separaci\u00f3n porque en el desarrollo de software es muy com\u00fan que querramos usar en distintos proyectos distintas versiones de la misma librer\u00eda. Por ejemplo, podemos tener un proyecto que hicimos hace un tiempo que usa una versi\u00f3n de numpy que ahora no es la \u00faltima. Para ese proyecto puede estar perfecta esa versi\u00f3n y algunas veces puede ser peligroso actualizar una librer\u00eda. Ahora si vamos a arrancar un nuevo proyecto seguramente queremos poder usar la \u00faltima versi\u00f3n de numpy. La soluci\u00f3n que nos da virtualenv es crear la cantidad de directorios virtuales que querramos con su versi\u00f3n de Python y sus librer\u00edas externas propias aisladas. Una pr\u00e1ctica muy com\u00fan con virtualenv es tener un entorno virtual por proyecto aislando cada proyecto y evitando cualquier problema de compatibilidad. \u00bfC\u00f3mo crear un entorno virtual? \u00b6 Primero necesitamos tener disponible la librer\u00eda virtualenv. La instalamos de la siguiente manera: pip install virtualenv Para crear un entorno virtual primero tenemos que ubicarnos en el directorio donde est\u00e1 el c\u00f3digo de nuestra aplicaci\u00f3n cd <path_del_proyecto> Ahora vamos a crear un directorio virtual llamado venv para la versi\u00f3n de Python que hayamos configurado como global virtualenv -p python venv Warning Recuerden tener en cuenta tener configurada la versi\u00f3n de Python con la que quieren arrancar el proyecto. En nuestro caso la versi\u00f3n 3.6.8 Se pueden asegurar ejecutando: $ python --version Ya estamos listos para usar nuestro entorno virtual. Tanto la versi\u00f3n de Python con las librer\u00edas se van a almacenar dentro del directorio venv creado. \u00bfComo usar mi entorno virtual? \u00b6 Para activar el entorno ejecutamos . venv/bin/activate Ahora si localizamos donde est\u00e1 el ejecutable de Python que utilizamos veremos que es el que est\u00e1 dentro del directorio virtual which python <directorio_del_proyecto>/venv/bin/python Es necesario desactivar si queremos volver a usar el python que instalamos globalmente deactivate Ahora si necesitamos instalar una librer\u00eda tenemos que activar el entorno y usar pip pip install numpy","title":"Entornos virtuales"},{"location":"entornos_virtuales/#entornos-virtuales","text":"Virtualenv es una herramienta usada para crear un ambiente aislado de Python. Este ambiente tiene su propio directorio de instalaci\u00f3n que no comparte librer\u00edas con otros ambientes virtualenv. Esto tiene la ventaja que separar las librer\u00edas espec\u00edficas que necesitamos en cada entorno virtual. Es \u00fatil hacer esta separaci\u00f3n porque en el desarrollo de software es muy com\u00fan que querramos usar en distintos proyectos distintas versiones de la misma librer\u00eda. Por ejemplo, podemos tener un proyecto que hicimos hace un tiempo que usa una versi\u00f3n de numpy que ahora no es la \u00faltima. Para ese proyecto puede estar perfecta esa versi\u00f3n y algunas veces puede ser peligroso actualizar una librer\u00eda. Ahora si vamos a arrancar un nuevo proyecto seguramente queremos poder usar la \u00faltima versi\u00f3n de numpy. La soluci\u00f3n que nos da virtualenv es crear la cantidad de directorios virtuales que querramos con su versi\u00f3n de Python y sus librer\u00edas externas propias aisladas. Una pr\u00e1ctica muy com\u00fan con virtualenv es tener un entorno virtual por proyecto aislando cada proyecto y evitando cualquier problema de compatibilidad.","title":"Entornos virtuales"},{"location":"entornos_virtuales/#como-crear-un-entorno-virtual","text":"Primero necesitamos tener disponible la librer\u00eda virtualenv. La instalamos de la siguiente manera: pip install virtualenv Para crear un entorno virtual primero tenemos que ubicarnos en el directorio donde est\u00e1 el c\u00f3digo de nuestra aplicaci\u00f3n cd <path_del_proyecto> Ahora vamos a crear un directorio virtual llamado venv para la versi\u00f3n de Python que hayamos configurado como global virtualenv -p python venv Warning Recuerden tener en cuenta tener configurada la versi\u00f3n de Python con la que quieren arrancar el proyecto. En nuestro caso la versi\u00f3n 3.6.8 Se pueden asegurar ejecutando: $ python --version Ya estamos listos para usar nuestro entorno virtual. Tanto la versi\u00f3n de Python con las librer\u00edas se van a almacenar dentro del directorio venv creado.","title":"\u00bfC\u00f3mo crear un entorno virtual?"},{"location":"entornos_virtuales/#como-usar-mi-entorno-virtual","text":"Para activar el entorno ejecutamos . venv/bin/activate Ahora si localizamos donde est\u00e1 el ejecutable de Python que utilizamos veremos que es el que est\u00e1 dentro del directorio virtual which python <directorio_del_proyecto>/venv/bin/python Es necesario desactivar si queremos volver a usar el python que instalamos globalmente deactivate Ahora si necesitamos instalar una librer\u00eda tenemos que activar el entorno y usar pip pip install numpy","title":"\u00bfComo usar mi entorno virtual?"},{"location":"instalar_git/","text":"Gu\u00eda de instalaci\u00f3n de Git \u00b6 TODO","title":"Instalar git"},{"location":"instalar_git/#guia-de-instalacion-de-git","text":"TODO","title":"Gu\u00eda de instalaci\u00f3n de Git"},{"location":"instalar_python/","text":"Instalaci\u00f3n de Python \u00b6 En esta gu\u00eda vamos a ver disintas formas de realizar la instalaci\u00f3n de la la versi\u00f3n espec\u00edfica de Python que se utilizar\u00e1 en la c\u00e1tedra para distintos sistemas operativos. El objetivo es que todos los alumnos que cursen la c\u00e1tedra puadan instalar en sus sistemas operativos la versi\u00f3n espec\u00edfica de Python que vamos a usar dentro de la c\u00e1tedra. El mecanismo para esto es utilizar una herramienta de manejo de versiones para python (Python Versi\u00f3n Manager) en los sistemas operativos Linux y MacOS. En el caso del sistema operativo Windows no vamos a usar esta herramienta ya que no funcionan del todo bien, y tampoco algunas alternativas que probamos. En este caso vamos a instalar la versi\u00f3n espec\u00edfica de Python que utilicemos. \u00bfPor qu\u00e9 usar una herramienta para menejar versiones? \u00b6 La idea de usar este tipo de herramientas son: Instalar pr\u00e1cticamente cualquier versi\u00f3n de Python (o del lenguaje que sea) Tener instaladas multiples versiones Otro objetivo para esta c\u00e1tedra es lograr que todos ustedes tengan exactamente la misma versi\u00f3n de Python. La herramienta que vamos a usar es pyenv Linux y MacOS \u00b6 Instalaci\u00f3n con brew (MacOS) \u00b6 Se puede instalar pyenv usando el manejador de paquetes Homebrew para MacOS. brew update brew install pyenv Instalaci\u00f3n con Git (Linux y MacOS) \u00b6 Hacer el checkout de pyenv en el directorio donde quieras que se instale. Un buen lugar puede ser $HOME/.pyenv . git clone https://github.com/pyenv/pyenv.git ~/.pyenv Define la variable de entorno PYENV_ROOT para tener disponible el path donde fue clonado el repositorio y agrega $PYENV_ROOT/bin a la variable $PATH para tener acceso al comando pyenv en la terminal. echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.bash_profile echo 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.bash_profile Warning Si usas ZSH modifica el comando con ~/.zshrc en lugar de ~/.bash_profile . Para Ubuntu y Fedora usa ~/.bashrc en en lugar de ~/.bash_profile . Finalmente para terminar de configurarlo y tener el autocompletado en la consola ejecuta el siguiente comando: echo -e 'if command -v pyenv 1>/dev/null 2>&1; then\\n eval \"$(pyenv init -)\"\\nfi' >> ~/.bash_profile Warning Al igual que en el paso anterior reemplaza con ~/.zshrc o ~/.bashrc en el comando seg\u00fan corresponda. Luego restartea la terminal para que tome los cambios. Info Gu\u00eda completa en el README de pyenv . Uso de pyenv \u00b6 Para buscar que version de Python queremos instalar podemos usar: pyenv install 3 .6.8 Ahora podemos seleccionar esta versi\u00f3n como global pyenv global 3 .6.8 o como versi\u00f3n local en el directorio que nos encontremos pyenv local 3 .6.8 Instalaci\u00f3n en Windows \u00b6 Desde instalador \u00b6 Descarga el instalador aqu\u00ed Otros instaladores: https://www.python.org/downloads/release/python-368/ Conclusi\u00f3n \u00b6 Ahora tenemos la versi\u00f3n de Python que necesitamos en nuestro sistema y estamos listo para utilizarlo.","title":"Instalar Python"},{"location":"instalar_python/#instalacion-de-python","text":"En esta gu\u00eda vamos a ver disintas formas de realizar la instalaci\u00f3n de la la versi\u00f3n espec\u00edfica de Python que se utilizar\u00e1 en la c\u00e1tedra para distintos sistemas operativos. El objetivo es que todos los alumnos que cursen la c\u00e1tedra puadan instalar en sus sistemas operativos la versi\u00f3n espec\u00edfica de Python que vamos a usar dentro de la c\u00e1tedra. El mecanismo para esto es utilizar una herramienta de manejo de versiones para python (Python Versi\u00f3n Manager) en los sistemas operativos Linux y MacOS. En el caso del sistema operativo Windows no vamos a usar esta herramienta ya que no funcionan del todo bien, y tampoco algunas alternativas que probamos. En este caso vamos a instalar la versi\u00f3n espec\u00edfica de Python que utilicemos.","title":"Instalaci\u00f3n de Python"},{"location":"instalar_python/#por-que-usar-una-herramienta-para-menejar-versiones","text":"La idea de usar este tipo de herramientas son: Instalar pr\u00e1cticamente cualquier versi\u00f3n de Python (o del lenguaje que sea) Tener instaladas multiples versiones Otro objetivo para esta c\u00e1tedra es lograr que todos ustedes tengan exactamente la misma versi\u00f3n de Python. La herramienta que vamos a usar es pyenv","title":"\u00bfPor qu\u00e9 usar una herramienta para menejar versiones?"},{"location":"instalar_python/#linux-y-macos","text":"","title":"Linux y MacOS"},{"location":"instalar_python/#instalacion-con-brew-macos","text":"Se puede instalar pyenv usando el manejador de paquetes Homebrew para MacOS. brew update brew install pyenv","title":"Instalaci\u00f3n con brew (MacOS)"},{"location":"instalar_python/#instalacion-con-git-linux-y-macos","text":"Hacer el checkout de pyenv en el directorio donde quieras que se instale. Un buen lugar puede ser $HOME/.pyenv . git clone https://github.com/pyenv/pyenv.git ~/.pyenv Define la variable de entorno PYENV_ROOT para tener disponible el path donde fue clonado el repositorio y agrega $PYENV_ROOT/bin a la variable $PATH para tener acceso al comando pyenv en la terminal. echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.bash_profile echo 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.bash_profile Warning Si usas ZSH modifica el comando con ~/.zshrc en lugar de ~/.bash_profile . Para Ubuntu y Fedora usa ~/.bashrc en en lugar de ~/.bash_profile . Finalmente para terminar de configurarlo y tener el autocompletado en la consola ejecuta el siguiente comando: echo -e 'if command -v pyenv 1>/dev/null 2>&1; then\\n eval \"$(pyenv init -)\"\\nfi' >> ~/.bash_profile Warning Al igual que en el paso anterior reemplaza con ~/.zshrc o ~/.bashrc en el comando seg\u00fan corresponda. Luego restartea la terminal para que tome los cambios. Info Gu\u00eda completa en el README de pyenv .","title":"Instalaci\u00f3n con Git (Linux y MacOS)"},{"location":"instalar_python/#uso-de-pyenv","text":"Para buscar que version de Python queremos instalar podemos usar: pyenv install 3 .6.8 Ahora podemos seleccionar esta versi\u00f3n como global pyenv global 3 .6.8 o como versi\u00f3n local en el directorio que nos encontremos pyenv local 3 .6.8","title":"Uso de pyenv"},{"location":"instalar_python/#instalacion-en-windows","text":"","title":"Instalaci\u00f3n en Windows"},{"location":"instalar_python/#desde-instalador","text":"Descarga el instalador aqu\u00ed Otros instaladores: https://www.python.org/downloads/release/python-368/","title":"Desde instalador"},{"location":"instalar_python/#conclusion","text":"Ahora tenemos la versi\u00f3n de Python que necesitamos en nuestro sistema y estamos listo para utilizarlo.","title":"Conclusi\u00f3n"},{"location":"manejo_de_paquetes/","text":"Manejo de paquetes en Python \u00b6 El manejador de paquetes pip tiene como objetivo realizar la instalaci\u00f3n de paquetes externos o librer\u00edas que querramos usar en nuestros proyectos. La herramienta sirve para descargar las mismas del repositorio de c\u00f3digo pypi donde est\u00e1n publicadas. Aunque se podr\u00eda configurar para descargarla de otro repositorio, por ejemplo, uno propio. Generalmente cuando instalamos la versi\u00f3n de Python que vamos a utilizar ya tenemos la herramienta pip instalada para esa versi\u00f3n. En caso de no ser as\u00ed podemos instalarla f\u00e1cilmenten: Descargar el contenido de este archivo Ejecutar python <archivo_anterior_descargardo>.py \u00bfC\u00f3mo usar pip ? \u00b6 Para instalar una librer\u00eda con pip ejecutamos: pip install PySimpleGUI Esto va a instalar la ultipa versi\u00f3n. Si queremos alguna versi\u00f3n en particular ejecutamos: pip install PySimpleGUI == 4 .16.0 Deber\u00edamos hacer esto por cada librer\u00eda que querramos instalar en el sistema. Una forma pr\u00e1ctica para no tener que repetirlo por cada librer\u00eda que querramos usar es tener un archivo donde poner toda las librer\u00edas que querramos de la siguiente manera: # File: requirements.txt PySimpleGUI == 4.16 numpy == 1.18 . 1 pandas == 1.0 . 1 Ahora podemos ejecutar un comando para instalar todas al mismo tiempo pip install -r requirements.txt Documentaci\u00f3n completa Enlace de la documentaci\u00f3n de comandos de pip aqu\u00ed","title":"Manejo de Paquetes"},{"location":"manejo_de_paquetes/#manejo-de-paquetes-en-python","text":"El manejador de paquetes pip tiene como objetivo realizar la instalaci\u00f3n de paquetes externos o librer\u00edas que querramos usar en nuestros proyectos. La herramienta sirve para descargar las mismas del repositorio de c\u00f3digo pypi donde est\u00e1n publicadas. Aunque se podr\u00eda configurar para descargarla de otro repositorio, por ejemplo, uno propio. Generalmente cuando instalamos la versi\u00f3n de Python que vamos a utilizar ya tenemos la herramienta pip instalada para esa versi\u00f3n. En caso de no ser as\u00ed podemos instalarla f\u00e1cilmenten: Descargar el contenido de este archivo Ejecutar python <archivo_anterior_descargardo>.py","title":"Manejo de paquetes en Python"},{"location":"manejo_de_paquetes/#como-usar-pip","text":"Para instalar una librer\u00eda con pip ejecutamos: pip install PySimpleGUI Esto va a instalar la ultipa versi\u00f3n. Si queremos alguna versi\u00f3n en particular ejecutamos: pip install PySimpleGUI == 4 .16.0 Deber\u00edamos hacer esto por cada librer\u00eda que querramos instalar en el sistema. Una forma pr\u00e1ctica para no tener que repetirlo por cada librer\u00eda que querramos usar es tener un archivo donde poner toda las librer\u00edas que querramos de la siguiente manera: # File: requirements.txt PySimpleGUI == 4.16 numpy == 1.18 . 1 pandas == 1.0 . 1 Ahora podemos ejecutar un comando para instalar todas al mismo tiempo pip install -r requirements.txt Documentaci\u00f3n completa Enlace de la documentaci\u00f3n de comandos de pip aqu\u00ed","title":"\u00bfC\u00f3mo usar pip?"}]}