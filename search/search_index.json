{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Inicio \u00b6 Documentaci\u00f3n de la c\u00e1tedra Taller de lenguaje de Programaci\u00f3n - Python. En esta documentaci\u00f3n se van a publicar distintas gu\u00edas que ayuden a los alumnos a realizar las pr\u00e1cticas de las materias.","title":"Home"},{"location":"#inicio","text":"Documentaci\u00f3n de la c\u00e1tedra Taller de lenguaje de Programaci\u00f3n - Python. En esta documentaci\u00f3n se van a publicar distintas gu\u00edas que ayuden a los alumnos a realizar las pr\u00e1cticas de las materias.","title":"Inicio"},{"location":"comandos/","text":"Comandos \u00b6 En esta gu\u00eda vamos a dejar una lista de comandos de consola que posiblemente van a utilizar. Los comando son espec\u00edficamente de Linux, pero los pueden usar en GitBash si trabajan con Windows. pwd # Imprime el directorio actual ls # Lista todos los archivos y directorios del directorio actual ls -a # Igual que el anterior pero unlcuye los ocultos mkdir dirname # Crea un nuevo directorio en el actual llamado \"dirname\" touch filename # Crea un archivo en el directorio actual llamado \"filename\" cd code/python # Se nueve al directorio \"code/python\"","title":"Comandos de consola"},{"location":"comandos/#comandos","text":"En esta gu\u00eda vamos a dejar una lista de comandos de consola que posiblemente van a utilizar. Los comando son espec\u00edficamente de Linux, pero los pueden usar en GitBash si trabajan con Windows. pwd # Imprime el directorio actual ls # Lista todos los archivos y directorios del directorio actual ls -a # Igual que el anterior pero unlcuye los ocultos mkdir dirname # Crea un nuevo directorio en el actual llamado \"dirname\" touch filename # Crea un archivo en el directorio actual llamado \"filename\" cd code/python # Se nueve al directorio \"code/python\"","title":"Comandos"},{"location":"entornos_virtuales/","text":"Entornos virtuales \u00b6 Virtualenv es una herramienta usada para crear un ambiente aislado de Python. Este ambiente tiene su propio directorio de instalaci\u00f3n que no comparte librer\u00edas con otros ambientes virtualenv. Esto tiene la ventaja que separa las librer\u00edas espec\u00edficas que necesitamos en cada entorno virtual. Es \u00fatil hacer esta separaci\u00f3n porque en el desarrollo de software es muy com\u00fan que querramos usar en distintos proyectos distintas versiones de la misma librer\u00eda. Por ejemplo, podemos tener un proyecto que hicimos hace un tiempo que usa una versi\u00f3n de numpy que ahora no es la \u00faltima. Para ese proyecto puede estar perfecta esa versi\u00f3n y algunas veces puede ser peligroso actualizar una librer\u00eda. Ahora si vamos a arrancar un nuevo proyecto seguramente queremos poder usar la \u00faltima versi\u00f3n de numpy . La soluci\u00f3n que nos da virtualenv es crear la cantidad de directorios virtuales que querramos con su versi\u00f3n de Python y sus librer\u00edas externas de forma aislada. Una pr\u00e1ctica muy com\u00fan con virtualenv es tener un entorno virtual por proyecto aislando cada proyecto y evitando cualquier problema de compatibilidad. \u00bfC\u00f3mo crear un entorno virtual? \u00b6 Primero necesitamos tener disponible la librer\u00eda virtualenv. La instalamos de la siguiente manera: pip install virtualenv Para crear un entorno virtual primero tenemos que ubicarnos en el directorio donde est\u00e1 el c\u00f3digo de nuestra aplicaci\u00f3n mkdir mi_proyecto cd mi_proyecto Ahora vamos a crear un directorio virtual llamado venv para la versi\u00f3n de Python que hayamos configurado como global virtualenv -p python venv Warning Recuerden tener en cuenta tener configurada la versi\u00f3n de Python con la que quieren arrancar el proyecto. En nuestro caso la versi\u00f3n 3.6.8 Se pueden asegurar ejecutando: $ python --version Ya estamos listos para usar nuestro entorno virtual. Tanto la versi\u00f3n de Python con las librer\u00edas se van a almacenar dentro del directorio venv creado. \u00bfComo usar mi entorno virtual? \u00b6 Para activar el entorno ejecutamos . venv/bin/activate Ahora si localizamos donde est\u00e1 el ejecutable de Python que utilizamos veremos que es el que est\u00e1 dentro del directorio virtual which python mi_proyecto/venv/bin/python Es necesario desactivar si queremos volver a usar el python que instalamos globalmente deactivate Ahora si necesitamos instalar una librer\u00eda tenemos que activar el entorno y usar pip pip install numpy","title":"Entornos virtuales"},{"location":"entornos_virtuales/#entornos-virtuales","text":"Virtualenv es una herramienta usada para crear un ambiente aislado de Python. Este ambiente tiene su propio directorio de instalaci\u00f3n que no comparte librer\u00edas con otros ambientes virtualenv. Esto tiene la ventaja que separa las librer\u00edas espec\u00edficas que necesitamos en cada entorno virtual. Es \u00fatil hacer esta separaci\u00f3n porque en el desarrollo de software es muy com\u00fan que querramos usar en distintos proyectos distintas versiones de la misma librer\u00eda. Por ejemplo, podemos tener un proyecto que hicimos hace un tiempo que usa una versi\u00f3n de numpy que ahora no es la \u00faltima. Para ese proyecto puede estar perfecta esa versi\u00f3n y algunas veces puede ser peligroso actualizar una librer\u00eda. Ahora si vamos a arrancar un nuevo proyecto seguramente queremos poder usar la \u00faltima versi\u00f3n de numpy . La soluci\u00f3n que nos da virtualenv es crear la cantidad de directorios virtuales que querramos con su versi\u00f3n de Python y sus librer\u00edas externas de forma aislada. Una pr\u00e1ctica muy com\u00fan con virtualenv es tener un entorno virtual por proyecto aislando cada proyecto y evitando cualquier problema de compatibilidad.","title":"Entornos virtuales"},{"location":"entornos_virtuales/#como-crear-un-entorno-virtual","text":"Primero necesitamos tener disponible la librer\u00eda virtualenv. La instalamos de la siguiente manera: pip install virtualenv Para crear un entorno virtual primero tenemos que ubicarnos en el directorio donde est\u00e1 el c\u00f3digo de nuestra aplicaci\u00f3n mkdir mi_proyecto cd mi_proyecto Ahora vamos a crear un directorio virtual llamado venv para la versi\u00f3n de Python que hayamos configurado como global virtualenv -p python venv Warning Recuerden tener en cuenta tener configurada la versi\u00f3n de Python con la que quieren arrancar el proyecto. En nuestro caso la versi\u00f3n 3.6.8 Se pueden asegurar ejecutando: $ python --version Ya estamos listos para usar nuestro entorno virtual. Tanto la versi\u00f3n de Python con las librer\u00edas se van a almacenar dentro del directorio venv creado.","title":"\u00bfC\u00f3mo crear un entorno virtual?"},{"location":"entornos_virtuales/#como-usar-mi-entorno-virtual","text":"Para activar el entorno ejecutamos . venv/bin/activate Ahora si localizamos donde est\u00e1 el ejecutable de Python que utilizamos veremos que es el que est\u00e1 dentro del directorio virtual which python mi_proyecto/venv/bin/python Es necesario desactivar si queremos volver a usar el python que instalamos globalmente deactivate Ahora si necesitamos instalar una librer\u00eda tenemos que activar el entorno y usar pip pip install numpy","title":"\u00bfComo usar mi entorno virtual?"},{"location":"instalar_git/","text":"Gu\u00eda de Git \u00b6 En la explicaci\u00f3n pr\u00e1ctica hablamos sobre los conceptos de git. Aqu\u00ed est\u00e1n las diapositivas . Instalaci\u00f3n \u00b6 En Debian-based \u00b6 sudo apt update sudo apt upgrade sudo apt install git En Red Hat-based \u00b6 sudo yum upgrade sudo yum install git En MacOS \u00b6 brew install git En Windows \u00b6 Descargar en instalar de gitforwindows o de git-scm . Tener en cuenta que en la c\u00e1tedra vamos a utilizar GitBash por lo cual deben asegurarse que se instale. Crear una cuenta de Github \u00b6 Para crear una cuenta tienen que entrar a la web de Github y regitrarse (Sing up). \u00bfC\u00f3mo usar Git? \u00b6 Vamos a ver dos formas para comenzar a trabajar con Git : Creando un repositorio desde cero y agregando los archivos iniciales. Descargando un proyecto ya creado y modificarlo. Configurar informaci\u00f3n en Git \u00b6 En git cuando se va a realizar una operaci\u00f3n para generar una nueva versi\u00f3n del c\u00f3digo es necesario contar con informaci\u00f3n de usuario. Por esto es necesario que configuremos lo siguiente: $ git config --global user.name \"John Doe\" $ git config --global user.email johndoe@example.com Para ver la configuraci\u00f3n: git config --list Comenzar un repositorio desde cero \u00b6 Con git podemos versionar cualquier directorio/carpeta donde comencemos nuestro proyecto. Por eso en primer lugar lo que vamos a hacer es crear un directorio. mkdir ejemplo_python El paso siguiente es moverme dentro del directorio para comenzar a trabajar. cd ejemplo_python Ahora vamos a inicializar nuestro directorio como un directorio versionado por Git . git init Podemos ver que se cre\u00f3 en este directorio una carpeta oculta con el nombre .git/ . Esto significa que este directirio est\u00e1 habilitado para ser versionado con Git . Ya estamos listos para crear nuestro primer archivo. vi app.py Guardamos el archivo en el directorio de nuestro proyecto. Warning En este caso utilizo el editor de texto vim. Les recomendamos que utilicen otro editor para trabajar como VsCode, Atom, SumblimeText, PyCharm, etc. Ahora si ejecutamos git status vamos a ver que Git detecto que hay un nuevo archivo que a\u00fan no est\u00e1 versionado en nuestro directorio. Para agregar este archivo al versionado de Git debemos hacer: git add app.py Volvemos a ejecutar el comando git status para ver que informaci\u00f3n nos da Git ahora de este archivo. Para hacer estos cambios efectivos es necesario crear un commit. git commit -m \"Creaci\u00f3n de archivo inicial :smile:\" Warning Si tenemos una instalaci\u00f3n nuevo de Git el sistema puede solicitar que configure mi nombre y mi mail para poder agregar esta informaci\u00f3n en el commit: Lo que tenemos que hacer es ejecutar los comandos que nos sugiere pero con nuestros datos personales. Esto es simplemente para que queden nuestros datos asociados al commit como autores. En este momento tenemos el primer commit en nuestro repositorio local. Podemos ver la lista de todos nuestros commits con el comando git log . Ahora queremos compartir nuestro c\u00f3digo y para esto es necesario subirlo a un repositorio remoto. Para esto es necesario crear un nuevo repositorio en Github . Warning Tener en cuenta de NO CREAR el archivo README.md como sugiere la gu\u00eda ya que va a complicar el subir nuestro c\u00f3digo. Una vez creado el repositorio en Github tenemos que agregar ese repositorio remoto en nuestro repositorio Git local. git remote add origin git@github.com:fedeotaran/ejemplo_python.git Ahora ya estamos listos para subir los commits con nuestros cambios. git push -u origin master La salida de comando deber\u00eda ser parecida a esta: Ahora nuestro c\u00f3digo ya esta subido al repositorio. Comenzar desde un reposotorio ya creado \u00b6 La secci\u00f3n anterior nos explica como crear un nuevo repositorio de Git , pero cuando estamos trabajando en equipo es necesario que s\u00f3lo una persona realice la creaci\u00f3n del repositorio. El resto de los miembros del equipo tiene que realizar la descarga del repositorio y comenzar a trabajar. Para esto es necesario usar el comando git clone . git clone https://github.com/<username>/<reponame>.git En mi caso para el repositorio que acabo de crear ser\u00eda: git clone https://github.com/fedeotaran/ejemplo_python.git Esto va a generar una nueva carpeta donde descargar\u00e1 el contenido del repositorio. La carpeta se crear\u00e1 en el directorio en donde estemos parados a la hora de ejecutar el comando git clone . \u00bfCom\u00f3 descargar el repo con otro nombre? Si queremos que la carpeta que genere sea con otro nombre distinta a la del repositorio hacemos: git clone https://github.com/fedeotaran/ejemplo_python.git otro_nombre El repositorio desgargado ya tiene toda la informaci\u00f3n de Git para comenzar. No es necesario hacer el git init dado que el repositorio ya cre\u00f3 otra persona. Ya estamos listos para comenzar a trabajar o continuar el trabajo. Nos movemos dentro del directorio. cd ejemplo_python Vamos a modificar el archivo app.py que generamos anteriormente. vi app.py Y ademas vamos a crear un nuevo archivo README.md para agregarle documentaci\u00f3n a nuestro proyecto. vi README.md Ahora si ejecutamos git status veremos cuales fueron las modificaciones que aplicamos a nuestro repositorio local. Para sumar estos cambios a git ejecutamos git add . git add . Info Recordar que con git add . lo que hacemos es agregar los cambios que hicimos para todos los archivos Una vez que tenemos listos el grupo de cambios y queremos versionarlos creamos un nuevo commit. git commit -m \"Modifico app y creaci\u00f3n de README para documentaci\u00f3n\" Ahora vamos a subir nuestros cambios. git push origin master Info Tener en cuenta que no es necesario subir cada un commit, podemos acumular localmente una serie de commits para luego aplicar los cambios en el servidor Ahora el servidor ya tiene nuestros nuevos cambios.","title":"Gu\u00eda de Git"},{"location":"instalar_git/#guia-de-git","text":"En la explicaci\u00f3n pr\u00e1ctica hablamos sobre los conceptos de git. Aqu\u00ed est\u00e1n las diapositivas .","title":"Gu\u00eda de Git"},{"location":"instalar_git/#instalacion","text":"","title":"Instalaci\u00f3n"},{"location":"instalar_git/#en-debian-based","text":"sudo apt update sudo apt upgrade sudo apt install git","title":"En Debian-based"},{"location":"instalar_git/#en-red-hat-based","text":"sudo yum upgrade sudo yum install git","title":"En Red Hat-based"},{"location":"instalar_git/#en-macos","text":"brew install git","title":"En MacOS"},{"location":"instalar_git/#en-windows","text":"Descargar en instalar de gitforwindows o de git-scm . Tener en cuenta que en la c\u00e1tedra vamos a utilizar GitBash por lo cual deben asegurarse que se instale.","title":"En Windows"},{"location":"instalar_git/#crear-una-cuenta-de-github","text":"Para crear una cuenta tienen que entrar a la web de Github y regitrarse (Sing up).","title":"Crear una cuenta de Github"},{"location":"instalar_git/#como-usar-git","text":"Vamos a ver dos formas para comenzar a trabajar con Git : Creando un repositorio desde cero y agregando los archivos iniciales. Descargando un proyecto ya creado y modificarlo.","title":"\u00bfC\u00f3mo usar Git?"},{"location":"instalar_git/#configurar-informacion-en-git","text":"En git cuando se va a realizar una operaci\u00f3n para generar una nueva versi\u00f3n del c\u00f3digo es necesario contar con informaci\u00f3n de usuario. Por esto es necesario que configuremos lo siguiente: $ git config --global user.name \"John Doe\" $ git config --global user.email johndoe@example.com Para ver la configuraci\u00f3n: git config --list","title":"Configurar informaci\u00f3n en Git"},{"location":"instalar_git/#comenzar-un-repositorio-desde-cero","text":"Con git podemos versionar cualquier directorio/carpeta donde comencemos nuestro proyecto. Por eso en primer lugar lo que vamos a hacer es crear un directorio. mkdir ejemplo_python El paso siguiente es moverme dentro del directorio para comenzar a trabajar. cd ejemplo_python Ahora vamos a inicializar nuestro directorio como un directorio versionado por Git . git init Podemos ver que se cre\u00f3 en este directorio una carpeta oculta con el nombre .git/ . Esto significa que este directirio est\u00e1 habilitado para ser versionado con Git . Ya estamos listos para crear nuestro primer archivo. vi app.py Guardamos el archivo en el directorio de nuestro proyecto. Warning En este caso utilizo el editor de texto vim. Les recomendamos que utilicen otro editor para trabajar como VsCode, Atom, SumblimeText, PyCharm, etc. Ahora si ejecutamos git status vamos a ver que Git detecto que hay un nuevo archivo que a\u00fan no est\u00e1 versionado en nuestro directorio. Para agregar este archivo al versionado de Git debemos hacer: git add app.py Volvemos a ejecutar el comando git status para ver que informaci\u00f3n nos da Git ahora de este archivo. Para hacer estos cambios efectivos es necesario crear un commit. git commit -m \"Creaci\u00f3n de archivo inicial :smile:\" Warning Si tenemos una instalaci\u00f3n nuevo de Git el sistema puede solicitar que configure mi nombre y mi mail para poder agregar esta informaci\u00f3n en el commit: Lo que tenemos que hacer es ejecutar los comandos que nos sugiere pero con nuestros datos personales. Esto es simplemente para que queden nuestros datos asociados al commit como autores. En este momento tenemos el primer commit en nuestro repositorio local. Podemos ver la lista de todos nuestros commits con el comando git log . Ahora queremos compartir nuestro c\u00f3digo y para esto es necesario subirlo a un repositorio remoto. Para esto es necesario crear un nuevo repositorio en Github . Warning Tener en cuenta de NO CREAR el archivo README.md como sugiere la gu\u00eda ya que va a complicar el subir nuestro c\u00f3digo. Una vez creado el repositorio en Github tenemos que agregar ese repositorio remoto en nuestro repositorio Git local. git remote add origin git@github.com:fedeotaran/ejemplo_python.git Ahora ya estamos listos para subir los commits con nuestros cambios. git push -u origin master La salida de comando deber\u00eda ser parecida a esta: Ahora nuestro c\u00f3digo ya esta subido al repositorio.","title":"Comenzar un repositorio desde cero"},{"location":"instalar_git/#comenzar-desde-un-reposotorio-ya-creado","text":"La secci\u00f3n anterior nos explica como crear un nuevo repositorio de Git , pero cuando estamos trabajando en equipo es necesario que s\u00f3lo una persona realice la creaci\u00f3n del repositorio. El resto de los miembros del equipo tiene que realizar la descarga del repositorio y comenzar a trabajar. Para esto es necesario usar el comando git clone . git clone https://github.com/<username>/<reponame>.git En mi caso para el repositorio que acabo de crear ser\u00eda: git clone https://github.com/fedeotaran/ejemplo_python.git Esto va a generar una nueva carpeta donde descargar\u00e1 el contenido del repositorio. La carpeta se crear\u00e1 en el directorio en donde estemos parados a la hora de ejecutar el comando git clone . \u00bfCom\u00f3 descargar el repo con otro nombre? Si queremos que la carpeta que genere sea con otro nombre distinta a la del repositorio hacemos: git clone https://github.com/fedeotaran/ejemplo_python.git otro_nombre El repositorio desgargado ya tiene toda la informaci\u00f3n de Git para comenzar. No es necesario hacer el git init dado que el repositorio ya cre\u00f3 otra persona. Ya estamos listos para comenzar a trabajar o continuar el trabajo. Nos movemos dentro del directorio. cd ejemplo_python Vamos a modificar el archivo app.py que generamos anteriormente. vi app.py Y ademas vamos a crear un nuevo archivo README.md para agregarle documentaci\u00f3n a nuestro proyecto. vi README.md Ahora si ejecutamos git status veremos cuales fueron las modificaciones que aplicamos a nuestro repositorio local. Para sumar estos cambios a git ejecutamos git add . git add . Info Recordar que con git add . lo que hacemos es agregar los cambios que hicimos para todos los archivos Una vez que tenemos listos el grupo de cambios y queremos versionarlos creamos un nuevo commit. git commit -m \"Modifico app y creaci\u00f3n de README para documentaci\u00f3n\" Ahora vamos a subir nuestros cambios. git push origin master Info Tener en cuenta que no es necesario subir cada un commit, podemos acumular localmente una serie de commits para luego aplicar los cambios en el servidor Ahora el servidor ya tiene nuestros nuevos cambios.","title":"Comenzar desde un reposotorio ya creado"},{"location":"instalar_python/","text":"Instalaci\u00f3n de Python \u00b6 En esta gu\u00eda vamos a ver disintas formas de realizar la instalaci\u00f3n de la la versi\u00f3n espec\u00edfica de Python que se utilizar\u00e1 en la c\u00e1tedra para distintos sistemas operativos. El objetivo es que todos los alumnos que cursen la c\u00e1tedra puadan instalar en sus sistemas operativos la versi\u00f3n espec\u00edfica de Python que vamos a usar dentro de la c\u00e1tedra. El mecanismo para esto es utilizar una herramienta de manejo de versiones para python (Python Versi\u00f3n Manager) en los sistemas operativos Linux y MacOS. En el caso del sistema operativo Windows no vamos a usar esta herramienta ya que no funcionan del todo bien, y tampoco algunas alternativas que probamos. En este caso vamos a instalar la versi\u00f3n espec\u00edfica de Python que utilicemos. \u00bfPor qu\u00e9 usar una herramienta para menejar versiones? \u00b6 La idea de usar este tipo de herramientas son: Instalar pr\u00e1cticamente cualquier versi\u00f3n de Python (o del lenguaje que sea) Tener instaladas multiples versiones Otro objetivo para esta c\u00e1tedra es lograr que todos ustedes tengan exactamente la misma versi\u00f3n de Python. La herramienta que vamos a usar es pyenv Linux y MacOS \u00b6 Instalaci\u00f3n con Git (Linux y MacOS) RECOMENDADA \u00b6 Hacer el checkout de pyenv en el directorio donde quieras que se instale. Un buen lugar puede ser $HOME/.pyenv . git clone https://github.com/pyenv/pyenv.git ~/.pyenv Define la variable de entorno PYENV_ROOT para tener disponible el path donde fue clonado el repositorio y agrega $PYENV_ROOT/bin a la variable $PATH para tener acceso al comando pyenv en la terminal. echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.bash_profile echo 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.bash_profile Warning Si usas ZSH modifica el comando con ~/.zshrc en lugar de ~/.bash_profile . Para Ubuntu y Fedora usa ~/.bashrc en en lugar de ~/.bash_profile . Finalmente para terminar de configurarlo y tener el autocompletado en la consola ejecuta el siguiente comando: echo -e 'if command -v pyenv 1>/dev/null 2>&1; then\\n eval \"$(pyenv init -)\"\\nfi' >> ~/.bash_profile Warning Al igual que en el paso anterior reemplaza con ~/.zshrc o ~/.bashrc en el comando seg\u00fan corresponda. Luego restartea la terminal para que tome los cambios. Info Gu\u00eda completa en el README de pyenv . Uso de pyenv \u00b6 Para buscar que version de Python queremos instalar podemos usar: pyenv install 3 .6.8 Ahora podemos seleccionar esta versi\u00f3n como global pyenv global 3 .6.8 o como versi\u00f3n local en el directorio que nos encontremos pyenv local 3 .6.8 Instalaci\u00f3n con brew (MacOS) \u00b6 Se puede instalar pyenv usando el manejador de paquetes Homebrew para MacOS. brew update brew install pyenv Instalaci\u00f3n en Windows \u00b6 Desde instalador \u00b6 Descarga el instalador aqu\u00ed Warning Tener en cuenta de seleccionar el box de abajo para agregar el ejecutable de Python al PATH del sistema. Otros instaladores: https://www.python.org/downloads/release/python-368/ Conclusi\u00f3n \u00b6 Ahora tenemos la versi\u00f3n de Python que necesitamos en nuestro sistema y estamos listo para utilizarlo.","title":"Instalar Python"},{"location":"instalar_python/#instalacion-de-python","text":"En esta gu\u00eda vamos a ver disintas formas de realizar la instalaci\u00f3n de la la versi\u00f3n espec\u00edfica de Python que se utilizar\u00e1 en la c\u00e1tedra para distintos sistemas operativos. El objetivo es que todos los alumnos que cursen la c\u00e1tedra puadan instalar en sus sistemas operativos la versi\u00f3n espec\u00edfica de Python que vamos a usar dentro de la c\u00e1tedra. El mecanismo para esto es utilizar una herramienta de manejo de versiones para python (Python Versi\u00f3n Manager) en los sistemas operativos Linux y MacOS. En el caso del sistema operativo Windows no vamos a usar esta herramienta ya que no funcionan del todo bien, y tampoco algunas alternativas que probamos. En este caso vamos a instalar la versi\u00f3n espec\u00edfica de Python que utilicemos.","title":"Instalaci\u00f3n de Python"},{"location":"instalar_python/#por-que-usar-una-herramienta-para-menejar-versiones","text":"La idea de usar este tipo de herramientas son: Instalar pr\u00e1cticamente cualquier versi\u00f3n de Python (o del lenguaje que sea) Tener instaladas multiples versiones Otro objetivo para esta c\u00e1tedra es lograr que todos ustedes tengan exactamente la misma versi\u00f3n de Python. La herramienta que vamos a usar es pyenv","title":"\u00bfPor qu\u00e9 usar una herramienta para menejar versiones?"},{"location":"instalar_python/#linux-y-macos","text":"","title":"Linux y MacOS"},{"location":"instalar_python/#instalacion-con-git-linux-y-macos-recomendada","text":"Hacer el checkout de pyenv en el directorio donde quieras que se instale. Un buen lugar puede ser $HOME/.pyenv . git clone https://github.com/pyenv/pyenv.git ~/.pyenv Define la variable de entorno PYENV_ROOT para tener disponible el path donde fue clonado el repositorio y agrega $PYENV_ROOT/bin a la variable $PATH para tener acceso al comando pyenv en la terminal. echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.bash_profile echo 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.bash_profile Warning Si usas ZSH modifica el comando con ~/.zshrc en lugar de ~/.bash_profile . Para Ubuntu y Fedora usa ~/.bashrc en en lugar de ~/.bash_profile . Finalmente para terminar de configurarlo y tener el autocompletado en la consola ejecuta el siguiente comando: echo -e 'if command -v pyenv 1>/dev/null 2>&1; then\\n eval \"$(pyenv init -)\"\\nfi' >> ~/.bash_profile Warning Al igual que en el paso anterior reemplaza con ~/.zshrc o ~/.bashrc en el comando seg\u00fan corresponda. Luego restartea la terminal para que tome los cambios. Info Gu\u00eda completa en el README de pyenv .","title":"Instalaci\u00f3n con Git (Linux y MacOS) RECOMENDADA"},{"location":"instalar_python/#uso-de-pyenv","text":"Para buscar que version de Python queremos instalar podemos usar: pyenv install 3 .6.8 Ahora podemos seleccionar esta versi\u00f3n como global pyenv global 3 .6.8 o como versi\u00f3n local en el directorio que nos encontremos pyenv local 3 .6.8","title":"Uso de pyenv"},{"location":"instalar_python/#instalacion-con-brew-macos","text":"Se puede instalar pyenv usando el manejador de paquetes Homebrew para MacOS. brew update brew install pyenv","title":"Instalaci\u00f3n con brew (MacOS)"},{"location":"instalar_python/#instalacion-en-windows","text":"","title":"Instalaci\u00f3n en Windows"},{"location":"instalar_python/#desde-instalador","text":"Descarga el instalador aqu\u00ed Warning Tener en cuenta de seleccionar el box de abajo para agregar el ejecutable de Python al PATH del sistema. Otros instaladores: https://www.python.org/downloads/release/python-368/","title":"Desde instalador"},{"location":"instalar_python/#conclusion","text":"Ahora tenemos la versi\u00f3n de Python que necesitamos en nuestro sistema y estamos listo para utilizarlo.","title":"Conclusi\u00f3n"},{"location":"manejo_de_paquetes/","text":"Manejo de paquetes en Python \u00b6 El manejador de paquetes pip tiene como objetivo realizar la instalaci\u00f3n de paquetes externos o librer\u00edas que querramos usar en nuestros proyectos. La herramienta sirve para descargar las mismas del repositorio de c\u00f3digo pypi donde est\u00e1n publicadas. Aunque se podr\u00eda configurar para descargarla de otro repositorio, por ejemplo, uno propio. Generalmente cuando instalamos la versi\u00f3n de Python que vamos a utilizar ya tenemos la herramienta pip instalada para esa versi\u00f3n. En caso de no ser as\u00ed podemos instalarla f\u00e1cilmenten: Descargar el contenido de este archivo Ejecutar python <archivo_anterior_descargardo>.py Gu\u00eda completa aqu\u00ed \u00bfC\u00f3mo usar pip ? \u00b6 Para instalar una librer\u00eda con pip ejecutamos: pip install art Esto va a instalar la ultipa versi\u00f3n. Si queremos alguna versi\u00f3n en particular ejecutamos: pip install art == 4 .5 Deber\u00edamos hacer esto por cada librer\u00eda que querramos instalar en el sistema. Una forma pr\u00e1ctica para no tener que repetirlo por cada librer\u00eda que querramos usar es tener un archivo donde poner toda las librer\u00edas que querramos de la siguiente manera: # File: requirements.txt art == 4.5 numpy == 1.18 . 1 pandas == 1.0 . 1 Ahora podemos ejecutar un comando para instalar todas al mismo tiempo pip install -r requirements.txt Documentaci\u00f3n completa Enlace de la documentaci\u00f3n de comandos de pip aqu\u00ed","title":"Manejo de Paquetes"},{"location":"manejo_de_paquetes/#manejo-de-paquetes-en-python","text":"El manejador de paquetes pip tiene como objetivo realizar la instalaci\u00f3n de paquetes externos o librer\u00edas que querramos usar en nuestros proyectos. La herramienta sirve para descargar las mismas del repositorio de c\u00f3digo pypi donde est\u00e1n publicadas. Aunque se podr\u00eda configurar para descargarla de otro repositorio, por ejemplo, uno propio. Generalmente cuando instalamos la versi\u00f3n de Python que vamos a utilizar ya tenemos la herramienta pip instalada para esa versi\u00f3n. En caso de no ser as\u00ed podemos instalarla f\u00e1cilmenten: Descargar el contenido de este archivo Ejecutar python <archivo_anterior_descargardo>.py Gu\u00eda completa aqu\u00ed","title":"Manejo de paquetes en Python"},{"location":"manejo_de_paquetes/#como-usar-pip","text":"Para instalar una librer\u00eda con pip ejecutamos: pip install art Esto va a instalar la ultipa versi\u00f3n. Si queremos alguna versi\u00f3n en particular ejecutamos: pip install art == 4 .5 Deber\u00edamos hacer esto por cada librer\u00eda que querramos instalar en el sistema. Una forma pr\u00e1ctica para no tener que repetirlo por cada librer\u00eda que querramos usar es tener un archivo donde poner toda las librer\u00edas que querramos de la siguiente manera: # File: requirements.txt art == 4.5 numpy == 1.18 . 1 pandas == 1.0 . 1 Ahora podemos ejecutar un comando para instalar todas al mismo tiempo pip install -r requirements.txt Documentaci\u00f3n completa Enlace de la documentaci\u00f3n de comandos de pip aqu\u00ed","title":"\u00bfC\u00f3mo usar pip?"}]}